name: Deploy BeyondAsk Platform

on:
  push:
    branches: [production]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    outputs:
      alb-url: ${{ steps.stack-outputs.outputs.alb-url }}
      cloudfront-url: ${{ steps.stack-outputs.outputs.cloudfront-url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy CloudFormation stack
        id: deploy-stack
        run: |
          aws cloudformation deploy \
            --template-file deployment/infrastructure.yml \
            --stack-name beyondask-infrastructure \
            --parameter-overrides Environment=production DomainName=demo.beyondask.com \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset || exit 1

      - name: Get stack outputs
        id: stack-outputs
        run: |
          ALB_URL=$(aws cloudformation describe-stacks \
            --stack-name beyondask-infrastructure \
            --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerURL`].OutputValue' \
            --output text)
          [ -z "$ALB_URL" ] && echo "Failed to get ALB URL" && exit 1
            
          CLOUDFRONT_URL=$(aws cloudformation describe-stacks \
            --stack-name beyondask-infrastructure \
            --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontURL`].OutputValue' \
            --output text)
          [ -z "$CLOUDFRONT_URL" ] && echo "Failed to get CloudFront URL" && exit 1
            
          echo "alb-url=$ALB_URL" >> $GITHUB_OUTPUT
          echo "cloudfront-url=$CLOUDFRONT_URL" >> $GITHUB_OUTPUT

  # Deploy Backend API to ECS Fargate
  deploy-backend:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build production package
        run: node production-final-complete.js

      - name: Build and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: beyondask-backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f deployment/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Create ECS task definition
        id: task-def
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: beyondask-backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Replace placeholders in task definition
          sed -i "s|ACCOUNT_ID|${{ steps.login-ecr.outputs.registry }}|g" deployment/ecs-task-definition.json
          sed -i "s|:latest|:$IMAGE_TAG|g" deployment/ecs-task-definition.json
          
          # Register new task definition
          aws ecs register-task-definition \
            --cli-input-json file://deployment/ecs-task-definition.json \
            --region ${{ env.AWS_REGION }}

      - name: Create or update ECS service
        run: |
          # Check if service exists
          if aws ecs describe-services \
            --cluster production-beyondask-cluster \
            --services beyondask-api \
            --region ${{ env.AWS_REGION }} \
            --query 'services[0].serviceName' \
            --output text | grep -q beyondask-api; then
            
            # Update existing service
            aws ecs update-service \
              --cluster production-beyondask-cluster \
              --service beyondask-api \
              --task-definition beyondask-backend:${{ github.run_number }} \
              --desired-count 2 \
              --region ${{ env.AWS_REGION }}
          else
            # Create new service
            aws ecs create-service \
              --cluster production-beyondask-cluster \
              --service-name beyondask-api \
              --task-definition beyondask-backend:${{ github.run_number }} \
              --desired-count 2 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[subnet-xxx,subnet-yyy],securityGroups=[sg-xxx],assignPublicIp=ENABLED}" \
              --load-balancers "targetGroupArn=arn:aws:elasticloadbalancing:us-east-1:ACCOUNT:targetgroup/production-beyondask-api-tg/xxx,containerName=beyondask-api,containerPort=5000" \
              --region ${{ env.AWS_REGION }}
          fi

      - name: Wait for service stability
        run: |
          aws ecs wait services-stable \
            --cluster production-beyondask-cluster \
            --services beyondask-api \
            --region ${{ env.AWS_REGION }}

  # Deploy Frontend to S3/CloudFront
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-backend]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend for production
        env:
          VITE_API_URL: ${{ needs.deploy-infrastructure.outputs.alb-url }}
          VITE_APP_NAME: BeyondAsk AI
          VITE_ENVIRONMENT: production
        run: |
          cd client
          npm run build
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to S3
        run: |
          # Get S3 bucket name from CloudFormation
          S3_BUCKET=$(aws cloudformation describe-stacks \
            --stack-name beyondask-infrastructure \
            --query 'Stacks[0].Outputs[?contains(OutputKey, `S3`)].OutputValue' \
            --output text)
          
          # Sync files to S3
          aws s3 sync client/dist/ s3://$S3_BUCKET \
            --delete \
            --cache-control "public,max-age=31536000,immutable" \
            --exclude "*.html" \
            --exclude "service-worker.js"
            
          aws s3 sync client/dist/ s3://$S3_BUCKET \
            --delete \
            --cache-control "public,max-age=0,must-revalidate" \
            --include "*.html" \
            --include "service-worker.js"
          
      - name: Invalidate CloudFront cache
        run: |
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
            --stack-name beyondask-infrastructure \
            --query 'Stacks[0].Outputs[?contains(OutputKey, `CloudFront`)].OutputValue' \
            --output text | cut -d'.' -f1)
          
          aws cloudfront create-invalidation \
            --distribution-id $DISTRIBUTION_ID \
            --paths "/*"

  # Run health checks
  health-check:
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-backend, deploy-frontend]
    steps:
      - name: Test backend health
        run: |
          echo "Testing backend health endpoint..."
          curl -f "${{ needs.deploy-infrastructure.outputs.alb-url }}/health" || exit 1
          echo "Backend health check passed!"

      - name: Test frontend availability
        run: |
          echo "Testing frontend availability..."
          curl -f "https://${{ needs.deploy-infrastructure.outputs.cloudfront-url }}" || exit 1
          echo "Frontend availability check passed!"

      - name: Deployment summary
        run: |
          echo "ðŸš€ Deployment completed successfully!"
          echo "Frontend URL: https://${{ needs.deploy-infrastructure.outputs.cloudfront-url }}"
          echo "Backend API: ${{ needs.deploy-infrastructure.outputs.alb-url }}"
