import { Router, Request, Response } from 'express';
import { verifyUser } from '../middleware/auth-middleware';
import { storage } from '../storage';

const router = Router();

// Get all visualizer boards for the current user
router.get('/all', verifyUser, async (req: Request, res: Response) => {
  try {
    const userId = req.user?.id;
    
    if (!userId) {
      return res.status(401).json({ message: 'User not authenticated' });
    }

    // Fetch boards from the database
    const boards = await storage.getVisualizerBoardsByUserId(userId);
    return res.json(boards);
  } catch (error) {
    console.error('Error fetching visualizer boards:', error);
    return res.status(500).json({ message: 'Server error' });
  }
});

// Get a specific visualizer board by ID
router.get('/:id', verifyUser, async (req: Request, res: Response) => {
  try {
    const userId = req.user?.id;
    const boardId = parseInt(req.params.id);
    
    if (!userId) {
      return res.status(401).json({ message: 'User not authenticated' });
    }

    if (isNaN(boardId)) {
      return res.status(400).json({ message: 'Invalid board ID' });
    }

    const board = await storage.getVisualizerBoard(boardId);
    
    if (!board) {
      return res.status(404).json({ message: 'Board not found' });
    }

    // Check if the board belongs to the user - use string comparison to handle any type mismatch
    if (String(board.userId) !== String(userId)) {
      console.log('Board access denied:', { 
        boardUserId: board.userId, 
        requestUserId: userId, 
        boardUserIdType: typeof board.userId,
        requestUserIdType: typeof userId
      });
      return res.status(403).json({ message: 'Unauthorized access to this board' });
    }

    return res.json(board);
  } catch (error) {
    console.error('Error fetching visualizer board:', error);
    return res.status(500).json({ message: 'Server error' });
  }
});

// Create a new visualizer board
router.post('/', verifyUser, async (req: Request, res: Response) => {
  try {
    const userId = req.user?.id;
    
    if (!userId) {
      return res.status(401).json({ message: 'User not authenticated' });
    }

    const { name, nodes, edges } = req.body;

    if (!name) {
      return res.status(400).json({ message: 'Missing required field: name' });
    }

    // Create board in the database
    const newBoard = await storage.createVisualizerBoard({
      name,
      userId,
      nodes: nodes || [],
      edges: edges || [],
      createdAt: new Date(),
      updatedAt: new Date()
    });

    return res.status(201).json(newBoard);
  } catch (error) {
    console.error('Error creating visualizer board:', error);
    return res.status(500).json({ message: 'Server error' });
  }
});

// Update a specific visualizer board
router.put('/:id', verifyUser, async (req: Request, res: Response) => {
  try {
    const userId = req.user?.id;
    const boardId = parseInt(req.params.id);
    
    if (!userId) {
      return res.status(401).json({ message: 'User not authenticated' });
    }

    if (isNaN(boardId)) {
      return res.status(400).json({ message: 'Invalid board ID' });
    }

    const { name, nodes, edges, description } = req.body;

    if (!name) {
      return res.status(400).json({ message: 'Missing required field: name' });
    }

    console.log(`Updating board ${boardId} for user ${userId}`);
    console.log('Board data:', { name, nodeCount: nodes?.length, edgeCount: edges?.length });

    // Verify board exists and belongs to user
    const existingBoard = await storage.getVisualizerBoard(boardId);
    
    if (!existingBoard) {
      return res.status(404).json({ message: 'Board not found' });
    }

    if (existingBoard.userId !== userId) {
      return res.status(403).json({ message: 'Unauthorized access to this board' });
    }

    // Update board in the database
    const updatedBoard = await storage.updateVisualizerBoard(boardId, {
      name,
      description: description || existingBoard.description,
      nodes: Array.isArray(nodes) ? nodes : [],
      edges: Array.isArray(edges) ? edges : [],
      updatedAt: new Date()
    });

    console.log('Board updated successfully');
    return res.json(updatedBoard);
  } catch (error) {
    console.error('Error updating visualizer board:', error);
    return res.status(500).json({ message: `Server error: ${error.message || 'Unknown error'}` });
  }
});

// Delete a specific visualizer board
router.delete('/:id', verifyUser, async (req: Request, res: Response) => {
  try {
    const userId = req.user?.id;
    const boardId = parseInt(req.params.id);
    
    if (!userId) {
      return res.status(401).json({ message: 'User not authenticated' });
    }

    if (isNaN(boardId)) {
      return res.status(400).json({ message: 'Invalid board ID' });
    }

    // Verify board exists and belongs to user
    const existingBoard = await storage.getVisualizerBoard(boardId);
    
    if (!existingBoard) {
      return res.status(404).json({ message: 'Board not found' });
    }

    if (existingBoard.userId !== userId) {
      return res.status(403).json({ message: 'Unauthorized access to this board' });
    }

    // Delete board from the database
    const success = await storage.deleteVisualizerBoard(boardId);

    if (success) {
      return res.json({ 
        success: true,
        message: 'Board deleted successfully',
        id: boardId
      });
    } else {
      return res.status(500).json({ message: 'Failed to delete board' });
    }
  } catch (error) {
    console.error('Error deleting visualizer board:', error);
    return res.status(500).json({ message: 'Server error' });
  }
});

export default router;